### Package - actions:
In dem Package Actions sind alle Aktionen enthalten, die ein Spieler während des Ablaufs des Spiels ausführen kann.
Diese Aktionen sind als Unterklassen der Klasse Action definiert und speichern so immer auch den Spieler der diese Aktion
ausführt. Des Weiteren speichern diese Action-Klassen alle Informationen die benötigt werden, um den Zug des Spielers rückgängig
zu machen.

### Package - cards:
Das Package Cards enthält alle Klassen und Enmus die wichtig für die verschiedenen Karten sind. Card stellt eine normale
Zahlenkarte mit Farbe und Nummer dar, LuckCard entspricht den Glückskarten. Farbe und Typ der Karten sind als Enum definiert,
um diese Werte an einem zentralen Ort definieren zu können.

### Package - entities:
Dieses Package ist das Herzstück des Spiels. Es enthält den Tisch, auf welchem die Karten und Kartenstapel liegen,
den Spieler mit Namen und seiner Hand, sowie den GameLoop welcher für den logischen Ablauf des Spiels zuständig ist.

### Cards
Das Spiel beinhaltet 60 Spielkarten, davon sind 48 Zahlen- und 12 Glückskarten. Die Zahlenkarten bestehen aus 8 verschiedenen
Farben mit jeweiliger Beschriftung 1-6. Für die Unterscheidung von Glücks- und Zahlenkarten sind die Klassen Card und LuckCard.
Eine Glückskarte kann einen von 6 Typen annehmen und somit verschiedene Funktionen für den Spieler bereitstellen. Diese Funktionen
werden von dem GameLoop ausgeführt und kontrolliert, womit die LuckCard-Klasse nur Funktionen bereitstellen muss, um den Typ der Karte
festzulegen. Eine Zahlenkarte besteht aus einer Zahl und einer Farbe, welche den Karten als Attribute zugefügt wurde. Unterhalb ist eine Auflistung der Methoden der einzelnen Klassen zu finden. Auf Grund
des Umfangs der Klassen beschränken wir uns hier auf die Public Methoden.

#### Class LuckCard
Repräsentiert die Glückskarten. Beinhaltet den Kartentyp als Attribut
Public Methoden:
- getCardType(), gibt den Typ der Glückskarte aus.
- toString(), gibt den Kartentyp in Textform aus.

#### Class Card
Repräsentiert die Zahlenkarten. Beinhaltet den Zahlenwert sowie die Farbe als Attribut. </br>
Public Methoden:
- getColor(), gibt die Farbe der Karte aus.
- getValue(), gibt den Wert der Karte aus.
- equals(), vergleicht zwei Karten anhand ihrer Farbe.
- toString(), gibt die Karte in einem lesbaren Format aus.

### Entities
Entities sind der aktive Teil des Spielverlaufs. Sie nutzen die Karten und sorgen mithilfe von festgelegten Regeln
für einen korrekten Spielablauf. Unterhalb ist eine Auflistung der Methoden der einzelnen Klassen zu finden. Auf Grund
des Umfangs der Klassen beschränken wir uns hier auf die Public Methoden.

#### Class Player
Repräsentiert den Spieler, welcher aktiv am Spielverlauf teilnimmt. </br>
Public Methoden:
- getCards(), gibt die aktuellen Zahlenkarten auf der Hand des Spielers aus.
- getLuckCards(), gibt die aktuellen Glückskarten auf der Hand des Spielers aus.
- getName(), gibt den Namen des Spielers aus.
- addCard(), fügt der Hand des Spielers eine Karte hinzu.
- addLuckCard(), fügt der Hand des Spielers eine Glückskarte hinzu.
- removeCard(), entfernt eine Karte von der Hand des Spielers
- getScore(), berechnet den aktuellen Score des Spielers
- toString(), gibt die Hände sowie den Namen des Spielers passen als Text aus.

#### Class Table
Repräsentiert den Tisch, mit Kartenstapeln und dem Spielfeld. </br>
Public Methoden:
- resetField(), nimmt Karten vom Kartenstapel und teilt diese auf dem Spielfeld aus.
- drawLuckCard(), gibt eine Karte vom Glückskartenstapel aus.
- getField(), gibt das aktuelle Spielfeld zurück.
- getCard(), gibt eine Karte vom Spielfeld an der gegebenen Position zurück.
- addCard(), legt eine Karte an der gegebenen Position auf dem Spielfeld ab.
- toString(), gibt eine lesbare Repräsentation des Spielfeldes zurück

#### Class GameLoop
Repräsentiert die Spiellogik, mit Spielablauf und nötigen Checks.
Der Ablauf des Spiels wird in der privaten Methode loop() ausgeführt.
Public Methoden:
- run(), startet das Spiel. Initialisiert alle nötigen Objekte und ruft eine Registrierung der Spieler auf.

### Configfile und Highscores
Das Configfile ist eine simple csv-Datei, von der die Bestückung der beiden Kartenstacks konfiguriert werden kann.
Der User wird beim Start des Programms gefragt, ob er die Kartenkonfiguration laden möchte.
Die Highscores werden automatisch am Anfang der Runde geladen und können vom User jederzeit angezeigt werden.
Am Ende eines Spiels werden die Highscores dann in der highscorce.txt gespeichert und sind dann in der nächsten Runde verfügbar.

---

# Änderungen zu Abgabe 2:

### Refactoring:
Da zu Aufgabe 2 viele, vorher nicht vorhersehbare, Änderungen am Code notwendig waren haben wir uns dazu entschieden einen
Großteil des Codes zu refactoren, um den Anforderungen für Aufgabe 2 gerecht werden zu können.
Damit wir die KIs problemlos in den Spielablauf integrieren können, spezifizieren diese nun den Spieler.
In der alten Version hat der GameLoop die gesamte Logik des Spielablaufs ausgeführt und kontrolliert.
Dies hat dazu geführt, dass die Loop()-Methode sehr voll und unübersichtlich war. Außerdem war es so nicht möglich die KI
einfach als Spieler einzubinden, da wir an jeder möglichen Stelle die Logik auf die KI anpassen müssten. Somit wäre die
Loop-Methode noch größer und unübersichtlicher geworden.
Damit die KI also die Playerklasse spezifizieren kann und nötige Methoden einfach überschreiben kann, musste der Großteil
der Spiellogik in die Playerklasse verschoben werden. Dies führte zu folgenden Methoden (Für genauere Beschreibung siehe Methoden-Doc.):

Player.setActive() - Signalisiert dem Spielerobjekt, dass es nun an der Reihe ist (Wird hauptsächlich vom GameLoop genutzt um Spielzüge zu überwachen)

Player.isActive() - Gibt den aktuellen Spielstatus des Spielers aus (Wird ebenfalls hauptsächlich vom GameLoop genutzt)

Player.chooseAction() - Gibt dem Spieler die Möglichkeit seinen nächsten Spielzug zu wählen

Player.roll() - Wirft den Würfel für den Spieler

Player.selectLuckCard() - Lässt den Spieler eine LuckCard aus seiner Hand spielen, jede dieser LuckCard-Typen hat eine
eigene Methode innerhalb des Spielers um ihre Logik aus zu führen

Player.chooseCard() - Lässt den Spieler eine Karte vom Feld ziehen

Player.selectHighCard() - Lässt den Spieler, welcher die Runde beendet hat, eine seiner höchsten Karten ablegen

Player.drawLuckCard() - Lässt den Spieler eine Karte wählen, welche er ablegen möchte um eine LuckCard zu ziehen

Mithilfe dieses Refactorings, können wir diese Methoden in der KI überschreiben und entsprechende Logik für verschiedene
KI-Stufen implementieren, ohne den Spielablauf speziell auf eine KI anpassen zu müssen.

### KI
Die KI sollte in 3 verschiedenen Schwierigkeitsgraden einstellbar sein. Dies erreichen wir, in dem wir 3 KI-Klassen implementieren
und für jede dieser Stufen, andere Logik in den wichtigsten Playerfunktionen implementieren. Jede KI gibt bei jedem ihrer Züge
eine kurze Begründung für die gewählte Aktion aus. Dies geschieht in Form einer Nachricht wie: "Ich habe bisher noch nicht
gewürfelt... Ich werde würfeln!"

#### Easy-KI
Die einfachste KI ist kein großer Gegner. Sie ist in der Lage den Würfel zu werfen und dann eine entsprechende Karte zu ziehen.
Sie reagiert weder auf Aktionen des Spielers, noch überlegt sie welche Karten die größte Gewinnchance bieten.
Damit die KI am Spielablauf teilnehmen kann, mussten die oben beschriebenen Methoden überschrieben werden und mit entsprechender Logik
gefüllt werden (siehe entities.EasyKI).

#### Medium-KI
Die mittlere KI strebt im Gegensatz zur einfachen KI dem Sieg entgegen und führt seine Aktionen entsprechend aus.
Dazu versucht sie beim würfeln, eine Augenzahl größer als 3 zu erreichen, bevor sie eine Karte vom Feld wählt.
Hat sie eine entsprechende Zahl gewürfelt oder ist nicht mehr in der Lage zu würfeln, wählt sie eine Karte.
Welche Karte die KI wählt, macht sie abhängig von der Anzahl der Karten, mit der selben Farbe, die auf dem Feld liegen.
Je weniger die gewählte Farbe auf dem Feld präsent ist, desto höher ist die Chance die Karte am Ende der Runde auch behalten
zu können.
Auch hier wurden die wichtigsten Methoden aus der Spielerklasse überschrieben und mit Logik gefüllt (siehe entities.MediumAI).

#### Hard-KI
Die schwierige KI berechnet, welche Karte sie nimmt, indem sie überprüft, welche Farben sie
bereits auf der Hand hat und versucht Karten der gleichen Farbe zu wählen. Wenn sie keine Karte
auf der Hand hat, überprüft sie, welche Farben am seltensten auf dem Tisch liegen. Glückskarten
zieht die KI nur, wenn sie mehr Punkte hat als ihre Gegner. Sie verwendet Glückskarten um das
gewürfelte Ergebnis zu ändern. Die cardsum-Karte verwendet sie nur, wenn sie keine andere Möglichkeit
hat (siehe entities.AIPlayer3).

### Tip
Zuerst wird geprüft, ob der Spieler gewürfelt hat. Dann wird ausgegeben, welche Karten der Spieler
nehmen darf und ob er eine Glückskarte verwenden muss um die Karte zu bekommen.
Danach wird anhand der Karten des Spielers und den Karten auf dem Feld geprüft,
welche Karte er nehmen sollte. Diese wird dem Spieler empfohlen. Wenn es keine passende Karte gibt,
wird er aufgefordert erneut zu würfeln. Falls er dies nicht kann, wird er darauf hingewiesen, dass
er die Runde beenden muss.

### Geschwindigkeit
Damit der Spieler den Spielablauf auch verfolgen kann und nicht alles auf einmal auf der Konsole angezeigt wird, kann der Spieler
nun am Anfang des Spiels auswählen wie die Anzeigen ablaufen sollen. Er kann zwischen einem manuellen Modus und einem automatischen wählen.
Beim manuellen Modus, muss der Spieler nach jeder Aktion oder Anzeige *Enter* drücken, damit die nächste Anzeige oder
Aktion ausgeführt werden kann.
Der automatische Modus lässt die Anzeige automatisch weiter laufen. Der Spieler kann dafür zu Beginn des Spiels die Geschwindigkeit
einstellen.
Diese Einstellungen werden im Spieler gespeichert und von der log()-Methode genutzt um dort zu warten. (siehe entities.player.log Z.814)

### Tests
Um die Funktionalität der public-Methoden testen zu können haben wir mithilfe von Gradle und JUnit 5 Testfälle geschrieben,
welche die Spieler- und KI-Methoden testen sollen. Im GameLoop werden ausschließlich private-Methoden genutzt um den
Spielablauf zu überprüfen, daher können wir hier nicht testen. Wir gehen davon aus, dass der korrekte Spielablauf gesichert ist,
wenn die Playermethoden funktional sind.
