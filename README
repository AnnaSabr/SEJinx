### Package - actions:
In dem Package Actions sind alle Aktionen enthalten, die ein Spieler während des Ablaufs des Spiels ausführen kann.
Diese Aktionen sind als Unterklassen der Klasse Action definiert und speichern so immer auch den Spieler der diese Aktion
ausführt. Des Weiteren speichern diese Action-Klassen alle Informationen die benötigt werden, um den Zug des Spielers rückgängig
zu machen.

### Package - cards:
Das Package Cards enthält alle Klassen und Enmus die wichtig für die verschiedenen Karten sind. Card stellt eine normale
Zahlenkarte mit Farbe und Nummer dar, LuckCard entspricht den Glückskarten. Farbe und Typ der Karten sind als Enum definiert,
um diese Werte an einem zentralen Ort definieren zu können.

### Package - entities:
Dieses Package ist das Herzstück des Spiels. Es enthält den Tisch, auf welchem die Karten und Kartenstapel liegen,
den Spieler mit Namen und seiner Hand, sowie den GameLoop welcher für den logischen Ablauf des Spiels zuständig ist.

### Cards
Das Spiel beinhaltet 60 Spielkarten, davon sind 48 Zahlen- und 12 Glückskarten. Die Zahlenkarten bestehen aus 8 verschiedenen
Farben mit jeweiliger Beschriftung 1-6. Für die Unterscheidung von Glücks- und Zahlenkarten sind die Klassen Card und LuckCard.
Eine Glückskarte kann einen von 6 Typen annehmen und somit verschiedene Funktionen für den Spieler bereitstellen. Diese Funktionen
werden von dem GameLoop ausgeführt und kontrolliert, womit die LuckCard-Klasse nur Funktionen bereitstellen muss, um den Typ der Karte
festzulegen. Eine Zahlenkarte besteht aus einer Zahl und einer Farbe, welche den Karten als Attribute zugefügt wurde. Unterhalb ist eine Auflistung der Methoden der einzelnen Klassen zu finden. Auf Grund
des Umfangs der Klassen beschränken wir uns hier auf die Public Methoden.

#### Class LuckCard
Repräsentiert die Glückskarten. Beinhaltet den Kartentyp als Attribut
Public Methoden:
- getCardType(), gibt den Typ der Glückskarte aus.
- toString(), gibt den Kartentyp in Textform aus.

#### Class Card
Repräsentiert die Zahlenkarten. Beinhaltet den Zahlenwert sowie die Farbe als Attribut. </br>
Public Methoden:
- getColor(), gibt die Farbe der Karte aus.
- getValue(), gibt den Wert der Karte aus.
- equals(), vergleicht zwei Karten anhand ihrer Farbe.
- toString(), gibt die Karte in einem lesbaren Format aus.

### Entities
Entities sind der aktive Teil des Spielverlaufs. Sie nutzen die Karten und sorgen mithilfe von festgelegten Regeln
für einen korrekten Spielablauf. Unterhalb ist eine Auflistung der Methoden der einzelnen Klassen zu finden. Auf Grund
des Umfangs der Klassen beschränken wir uns hier auf die Public Methoden.

#### Class Player
Repräsentiert den Spieler, welcher aktiv am Spielverlauf teilnimmt. </br>
Public Methoden:
- getCards(), gibt die aktuellen Zahlenkarten auf der Hand des Spielers aus.
- getLuckCards(), gibt die aktuellen Glückskarten auf der Hand des Spielers aus.
- getName(), gibt den Namen des Spielers aus.
- addCard(), fügt der Hand des Spielers eine Karte hinzu.
- addLuckCard(), fügt der Hand des Spielers eine Glückskarte hinzu.
- removeCard(), entfernt eine Karte von der Hand des Spielers
- getScore(), berechnet den aktuellen Score des Spielers
- toString(), gibt die Hände sowie den Namen des Spielers passen als Text aus.

#### Class Table
Repräsentiert den Tisch, mit Kartenstapeln und dem Spielfeld. </br>
Public Methoden:
- resetField(), nimmt Karten vom Kartenstapel und teilt diese auf dem Spielfeld aus.
- drawLuckCard(), gibt eine Karte vom Glückskartenstapel aus.
- getField(), gibt das aktuelle Spielfeld zurück.
- getCard(), gibt eine Karte vom Spielfeld an der gegebenen Position zurück.
- addCard(), legt eine Karte an der gegebenen Position auf dem Spielfeld ab.
- toString(), gibt eine lesbare Repräsentation des Spielfeldes zurück

#### Class GameLoop
Repräsentiert die Spiellogik, mit Spielablauf und nötigen Checks.
Der Ablauf des Spiels wird in der privaten Methode loop() ausgeführt.
Public Methoden:
- run(), startet das Spiel. Initialisiert alle nötigen Objekte und ruft eine Registrierung der Spieler auf.

### Configfile und Highscores
Das Configfile ist eine simple csv-Datei, von der die Bestückung der beiden Kartenstacks konfiguriert werden kann.
Der User wird beim Start des Programms gefragt, ob er die Kartenkonfiguration laden möchte.
Die Highscores werden automatisch am Anfang der Runde geladen und können vom User jederzeit angezeigt werden.
Am Ende eines Spiels werden die Highscores dann in der highscorce.txt gespeichert und sind dann in der nächsten Runde verfügbar.

---

# Änderungen zu Abgabe 2:

### Refactoring:
Da zu Aufgabe 2 viele, vorher nicht vorhersehbare, Änderungen am Code notwendig waren haben wir uns dazu entschieden einen
Großteil des Codes zu refactoren, um den Anforderungen für Aufgabe 2 gerecht werden zu können.
Damit wir die KIs problemlos in den Spielablauf integrieren können, spezifizieren diese nun den Spieler.
In der alten Version hat der GameLoop die gesamte Logik des Spielablaufs ausgeführt und kontrolliert.
Dies hat dazu geführt, dass die Loop()-Methode sehr voll und unübersichtlich war. Außerdem war es so nicht möglich die KI
einfach als Spieler einzubinden, da wir an jeder möglichen Stelle die Logik auf die KI anpassen müssten. Somit wäre die
Loop-Methode noch größer und unübersichtlicher geworden.
Damit die KI also die Playerklasse spezifizieren kann und nötige Methoden einfach überschreiben kann, musste der Großteil
der Spiellogik in die Playerklasse verschoben werden. Dies führte zu folgenden Methoden (Für genauere Beschreibung siehe Methoden-Doc.):

Player.setActive() - Signalisiert dem Spielerobjekt, dass es nun an der Reihe ist (Wird hauptsächlich vom GameLoop genutzt um Spielzüge zu überwachen)

Player.isActive() - Gibt den aktuellen Spielstatus des Spielers aus (Wird ebenfalls hauptsächlich vom GameLoop genutzt)

Player.chooseAction() - Gibt dem Spieler die Möglichkeit seinen nächsten Spielzug zu wählen

Player.roll() - Wirft den Würfel für den Spieler

Player.selectLuckCard() - Lässt den Spieler eine LuckCard aus seiner Hand spielen, jede dieser LuckCard-Typen hat eine
eigene Methode innerhalb des Spielers um ihre Logik aus zu führen

Player.chooseCard() - Lässt den Spieler eine Karte vom Feld ziehen

Player.selectHighCard() - Lässt den Spieler, welcher die Runde beendet hat, eine seiner höchsten Karten ablegen

Player.drawLuckCard() - Lässt den Spieler eine Karte wählen, welche er ablegen möchte um eine LuckCard zu ziehen

Mithilfe dieses Refactorings, können wir diese Methoden in der KI überschreiben und entsprechende Logik für verschiedene
KI-Stufen implementieren, ohne den Spielablauf speziell auf eine KI anpassen zu müssen.

### KI
Die KI sollte in 3 verschiedenen Schwierigkeitsgraden einstellbar sein. Dies erreichen wir, in dem wir 3 KI-Klassen implementieren
und für jede dieser Stufen, andere Logik in den wichtigsten Playerfunktionen implementieren.
Aufgrund der Spezifizierung des Spielers, sind die KIs untereinander in der Lage ein Spiel durchzuführen. Jede KI gibt bei jedem ihrer Züge
eine kurze Begründung für die gewählte Aktion aus. Dies geschieht in Form einer Nachricht wie: "Ich habe bisher noch nicht
gewürfelt... Ich werde würfeln!"

#### Easy-KI
Die einfachste KI ist kein großer Gegner. Sie ist in der Lage den Würfel zu werfen und dann eine entsprechende Karte zu ziehen.
Sie reagiert weder auf Aktionen des Spielers, noch überlegt sie welche Karten die größte Gewinnchance bieten.
Damit die KI am Spielablauf teilnehmen kann, mussten die oben beschriebenen Methoden überschrieben werden und mit entsprechender Logik
gefüllt werden (siehe entities.EasyKI).

#### Medium-KI
Die mittlere KI strebt im Gegensatz zur einfachen KI dem Sieg entgegen und führt seine Aktionen entsprechend aus.
Dazu versucht sie beim würfeln, eine Augenzahl größer als 3 zu erreichen, bevor sie eine Karte vom Feld wählt.
Hat sie eine entsprechende Zahl gewürfelt oder ist nicht mehr in der Lage zu würfeln, wählt sie eine Karte.
Welche Karte die KI wählt, macht sie abhängig von der Anzahl der Karten, mit der selben Farbe, die auf dem Feld liegen.
Je weniger die gewählte Farbe auf dem Feld präsent ist, desto höher ist die Chance die Karte am Ende der Runde auch behalten
zu können.
Auch hier wurden die wichtigsten Methoden aus der Spielerklasse überschrieben und mit Logik gefüllt (siehe entities.MediumAI).

#### Hard-KI
Die schwierige KI berechnet, welche Karte sie nimmt, indem sie überprüft, welche Farben sie
bereits auf der Hand hat und versucht Karten der gleichen Farbe zu wählen. Wenn sie keine Karte
auf der Hand hat, überprüft sie, welche Farben am seltensten auf dem Tisch liegen. Glückskarten
zieht die KI nur, wenn sie mehr Punkte hat als ihre Gegner. Sie verwendet Glückskarten um das
gewürfelte Ergebnis zu ändern. Die cardsum-Karte verwendet sie nur, wenn sie keine andere Möglichkeit
hat (siehe entities.AIPlayer3).

### Tip
Zuerst wird geprüft, ob der Spieler gewürfelt hat. Dann wird ausgegeben, welche Karten der Spieler
nehmen darf und ob er eine Glückskarte verwenden muss um die Karte zu bekommen.
Danach wird anhand der Karten des Spielers und den Karten auf dem Feld geprüft,
welche Karte er nehmen sollte. Diese wird dem Spieler empfohlen. Wenn es keine passende Karte gibt,
wird er aufgefordert erneut zu würfeln. Falls er dies nicht kann, wird er darauf hingewiesen, dass
er die Runde beenden muss.

### Geschwindigkeit
Damit der Spieler den Spielablauf auch verfolgen kann und nicht alles auf einmal auf der Konsole angezeigt wird, kann der Spieler
nun am Anfang des Spiels auswählen wie die Anzeigen ablaufen sollen. Er kann zwischen einem manuellen Modus und einem automatischen wählen.
Beim manuellen Modus, muss der Spieler nach jeder Aktion oder Anzeige *Enter* drücken, damit die nächste Anzeige oder
Aktion ausgeführt werden kann.
Der automatische Modus lässt die Anzeige automatisch weiter laufen. Der Spieler kann dafür zu Beginn des Spiels die Geschwindigkeit
einstellen.
Diese Einstellungen werden im Spieler gespeichert und von der log()-Methode genutzt um dort zu warten. (siehe entities.player.log Z.814)

### Tests
Um die Funktionalität der public-Methoden testen zu können haben wir mithilfe von Gradle und JUnit 5 Testfälle geschrieben,
welche die Spieler- und KI-Methoden testen sollen. Im GameLoop werden ausschließlich private-Methoden genutzt um den
Spielablauf zu überprüfen, daher können wir hier nicht testen. Wir gehen davon aus, dass der korrekte Spielablauf gesichert ist,
wenn die Playermethoden funktional sind.

---
# Änderungen zu Abgabe 3

### Datenbank - MySQL mit JDBC-Connector [ER-Diagramm in jinx_db.png]
Mit den neuen Anforderungen ist es nötig geworden, eine relationale Datenbank zu verwenden um alle wichtigen Informationen über einen
Spieler und den Spielverlauf zu speichern.
Als Datenbank nutzen wir MySQL mit einem JDBC-Connector. Ein SQL-Script welches ein Schema sowie alle Tabellen und Constraints anlegt ist in **jinx.sql** zu finden.
Damit Jinx eine Verbindung zur Datenbank herstellen kann, müssen in DB-Connector die richtigen Zugangsdaten eingetragen werden. Standardmäßig
sucht Jinx in **jdbc:mysql://localhost:3306/jinx** nach einem **root** User mit den Passwort **passwort**.
Um CardStacks und das Kartenfeld sinnvoll speichern zu können nutzen wir GSON, welches diese Objekte in JSON serialisiert, wodurch
wir dann den JSON-String als Feld in der entsprechenden Tabelle speichern können. GSON übernimmt dann beim laden auch das zurück
Serialisieren.
Um alle neuen Bibliotheken zu laden und zu installieren, das Projekt mit Gradle bauen und dann ausführen, Gradle sollte dann
alle benötigten Bibliotheken herunterladen.

#### Schema
Ein Spieler legt einen Account mit einem Passwort und einem Namen an. Der Name ist Primary Key der Tabelle Player, so kann
es nur eindeutige Namen geben, mit denen sich die Spieler identifizieren. Das Passwort wird als Integer gespeichert und mit
dem Standard hashcode() von Java verschlüsselt. Die Spielhistorien des Spielers werden in der Tabelle PlayerHistory festgehalten.
Zu einer Spielhistorie gehört der Tag an dem das Spiel stattgefunden hat, ein Spieler, sowie sein Score und die Anzahl
der benutzten LuckCards in diesem Spiel. Außerdem wird ein Verweis auf die Gegner des Spielers in diesem Spiel festgehalten.
Zu den Gegnern wird gespeichert, welchen Score sie hatten.

Um den aktuellen Spielablauf zu storage und laden zu können haben wir die Tabellen action, spieler, storage, tisch und round
erstellt. (Siehe jinx_db.png)
Speicher - Stellt einen Speicherstand da und verbindet alle wichtigen Entities miteinander
Besteht nur aus einer ID und dem Datum an dem der Speicherstand gespeichert wurde

Runde - Ein Spiel kann aus mehreren gespielten Runden bestehen, dies soll auch persistiert werden
Hat ebenfalls eine ID und einen Verweis auf den Speicherstand zu dem sie gehört

Spieler - Nimmt am Spiel teil und muss mit seinem aktuellen Stand gespeichert werden
Speichert alle wichtigen Felder eines Spielers. CardStacks werden als JSON gespeichert und mittels GSON serialisiert.
Wenn der Spieler eine KI ist wird dies festgehalten, damit diese beim Laden auch wieder initialisiert werden kann.
Hat einen Verweis auf eine Runde, da sich der Stand der Attribute jederzeit ändern kann.

Tisch - Verändert sich mit jedem Zug und muss ebenfalls jeden Speicherstand berücksichtigen
Auch beim Tisch werden die CardStacks mittels GSON serialisiert und als JSON-String in der Datenbank gepeichert.
Der Tisch hat genauso wie der Spieler einen Verweis auf eine Runde, da sich auch hier die Attribute mit jedem Spielzug ändern
können.

Action - Zeigt den Verlauf der einzelnen Aktionen des Spielers
Beinhaltet einen Zug sowie die Karte die an diesem Zug beteiligt war. Außerdem enthält die Aktion einen Verweis auf den
Speicherstand, sowie die Runde in der sie ausgeführt wurde.

#### Code - Datenbankzugriff
Der Zugriff auf die Datenbank erfolgt über den DBConnector. Dieser ist als Singleton implementiert, um unnötig viele Verbindungen
zur Datenbank zu verhindern. Der Connector bietet alle wichtigen Funktionen um mit der Datenbank zu kommunizieren. Er übernimmt
das Prüfen nach Einträgen oder das Erstellen von diesen. Die einzelnen Funktionen sind im Source Code mithilfe von JavaDoc genauer
dokumentiert.
Um die PlayerHistory möglichst simple speichern zu können, haben wir eine PlayerHistory-Klasse implementiert, die alle wichtigen
Daten für diese History zentral verwalten soll. So kann dieses Objekt einfach mit Informationen gefüllt werden und dann von
jedem genutzt werden, der mit diesen Informationen arbeiten möchte.
Für den Spielstand nutzen wir die Speicher-Klasse welche einen Speicherstand eines aktuellen Spiels repräsentiert. Ein
Speicherobjekt enthält sowohl den aktuellen Stand als auch vergangene Spielzüge um so den Verlauf der Spielzüge nachvollziehen zu
können. Der DBConnector übernimmt sowohl das Speichern als auch das Laden des Speicher-Objekts. Dazu schaut er sich jedes Attribut
des Speicher-Objekts an und speichert die Werte in den passenden Tabellen.

#### Histories
Die Histories können aus der Datenbank oder einer Textdatei geladen werden. Dafür braucht ein Spieler ein
Profil. Histories werden in einer Instanzvariable des Spielers gespeichert und können während des
Spiels angezeigt werden. Dabei werden Score, Glückskarten, Datum und Gegner gespeichert bzw. angezeigt.
Am Ende einer Runde werden die Histories aller Spieler gespeichert. Um die Histories in der Datei
zu speichern, werden Strings verwendet. Um sie in der Datenbank zu speichern, wird ein PlayerHistory
Objekt erzeugt.

#### Profile
Spieler haben ein Profil mit Name und Passwort. Das Passwort wird sowohl in Datenbank als auch in der
Textdatei nur verschlüsselt gespeichert. Die KIs haben die Profile AILevel1, AILevel2 und AILevel3.
Diese Profile kann der Spieler nicht auswählen. Zu Beginn eines Spiels muss ein Spieler ein Profil
auswählen oder erstellen.

#### GUI
Die GUI kann über die Konsole ausgewählt werden. Um die Einstellungen für das Spiel zu wählen, wie die Anzahl der KIs, gibt 
es zu Beginn des Spiels mehrere Fragen, die durch Buttons und Textfelder beantwortet werden.
Die Spielkarten sind Rechtecke, die mithilfe von Graphics2d gezeichnet werden. Um eine Karte auszuwählen, muss das Rechteck mit 
der Maus angeklickt werden. Die Luckcards werden durch Buttons mit entsprechenden Bildern dargestellt. Der Spieler kann die GUI 
außerdem über Knöpfe bedienen, mit denen zum Beispiel der Würfel betätigt werden kann.
Die Spielehistorien des Spielers sowie die Highscore Liste werden während des Spiels über JTable angezeigt.
Über ein JLabel wird angezeigt welcher Spieler an der Reihe ist.

#### Benutzeranleitung
Bevor das Spiel beginnt, muss der Spieler über die Konsole Einstellungen für das Spiel festlegen. Dafür werden dem Spieler mehrere 
Fragen gestellt, die er mit “y”(ja) oder “n”(nein) beantworten muss. Wenn das Spiel beginnt, wird über die Konsole die Anzahl der Spieler 
und anschließend die Anzahl der KIs festgelegt. Dann muss für jeden Spieler, einschließlich der KIs ein Name ausgewählt werden. Die 
Spieler müssen ein Profil auswählen oder erstellen. Wenn alle Spieler einen Namen haben, wird eine Liste mit allen bisherigen Highscores 
angezeigt. Danach beginnt das Spiel, indem ein 4x4 Feld mit Spielkarten auf der Konsole ausgegeben wird. Eine Spielkarte wird in dem 
Format Wert/Farbe angegeben (z.B. 4/RED).
Menschliche Spieler müssen nun eine Aktion aus dem Menü auswählen. Sie können würfeln (“R”), eine Karte auswählen (“C”), 
eine Glückskarte auswählen(“L”), einen Zug zurücknehmen(“M”), die Highscoreliste anzeigen lassen(“H”), den Verlauf anzeigen(“N”), 
das Spiel speichern(“S”), Züge anzeigen(“Z”), ein altes Spiel laden(“X”), einen Hinweis anzeigen lassen(“A”) 
oder alte Spielerhistorien anzeigen lassen(“P”).
KIs würfeln zuerst. Die leichte und mittlere KI ziehen direkt eine Karte, die schwierige KI kann auch Glückskarten verwenden.
Die KIs erklären ihre Züge über die Konsole.
Nachdem der Spieler gewürfelt und optional Glückskarten verwendet hat, muss er eine Karte auswählen. Die Karte muss der gewürfelten 
Zahl entsprechen. Wenn keine passende Karte verfügbar ist, wird die Runde beendet. Der Spieler, der die Runde beendet hat, muss seine 
höchste Karte ablegen. Wenn er mehrere Karten ablegen könnte, muss er über die Konsole eine dieser Karten auswählen. Dann werden die Karten 
auf dem Tisch mit den Karten der Spieler verglichen. Karten, deren Farben noch auf dem Tisch liegen, werden ebenfalls abgelegt. Dann darf 
jeder Spieler eine beliebige seiner Karten gegen eine Glückskarte tauschen. Dann beginnt die nächste Runde.
Nach drei Runden wird das Spiel beendet. Die neuen Spielerhistorien werden angezeigt und gespeichert. Die neuen Scores werden ebenfalls gespeichert.
Dann wird der Spieler gefragt, ob er ein neues Spiel starten möchte. Dies muss er wie zu Beginn des Spiels mit y(ja) oder n(nein) beantworten.
